/**
 * 智能搜索系统 - 优化版
 * 实现全文搜索、智能筛选和推荐功能
 * 优化内容：代码压缩、性能优化、防抖处理
 */

class PropertySearch {
    constructor() {
        this.properties = [];
        this.filteredResults = [];
        this.currentFilters = {
            keyword: '',
            type: 'all',
            priceMax: 600,
            area: 'all',
            location: 'all',
            features: []
        };
        this.currentSort = 'relevance';
        this.savedSearches = [];
        this.searchHistory = [];
        this.searchIndex = {};
        this.debounceTimer = null;
        
        this.init();
    }
    
    /**
     * 初始化搜索系统
     */
    init() {
        this.loadPropertyData();
        this.loadSavedSearches();
        this.setupEventListeners();
        this.initializeFilters();
        
        // 使用性能标记
        if (window.performance) {
            performance.mark('search-init-end');
        }
        
        console.log('[PropertySearch] 智能搜索系统初始化完成');
    }
    
    /**
     * 加载房源数据
     */
    loadPropertyData() {
        // 性能标记开始
        if (window.performance) {
            performance.mark('data-load-start');
        }
        
        // 扩展房源数据，包含更多搜索字段
        this.properties = [
            {
                id: 1,
                name: '金桂花园',
                type: 'house',
                price: 150,
                priceUnit: '万',
                location: '大丰区新丰镇',
                address: '新丰镇金桂大道188号',
                area: 120,
                areaUnit: '㎡',
                buildYear: '2022',
                floors: '18层',
                households: '288户',
                developer: '宜家房产',
                image: 'assets/images/property1.jpg',
                features: ['精装修', '学区房', '地铁沿线', '停车位'],
                description: '品质住宅小区，环境优美，配套齐全',
                avgPrice: 12500,
                totalPrice: 150,
                tags: ['住宅', '学区', '地铁', '精装'],
                searchKeywords: '金桂花园 新丰镇 学区房 地铁沿线 精装修 停车位'
            },
            {
                id: 2,
                name: '海景公寓',
                type: 'apartment',
                price: 85,
                priceUnit: '万',
                location: '大丰区海洋新城',
                address: '海洋新城滨海大道66号',
                area: 89,
                areaUnit: '㎡',
                buildYear: '2023',
                floors: '26层',
                households: '156户',
                developer: '宜家房产',
                image: 'assets/images/property2.jpg',
                features: ['海景房', '现房', '投资热点', '配套成熟'],
                description: '海景公寓，视野开阔，投资自住两相宜',
                avgPrice: 9551,
                totalPrice: 85,
                tags: ['公寓', '海景', '投资', '现房'],
                searchKeywords: '海景公寓 海洋新城 海景房 现房 投资热点 配套成熟'
            },
            {
                id: 3,
                name: '书香别墅',
                type: 'villa',
                price: 380,
                priceUnit: '万',
                location: '大丰区恒北村',
                address: '恒北村书香路8号',
                area: 280,
                areaUnit: '㎡',
                buildYear: '2023',
                floors: '3层',
                households: '68户',
                developer: '宜家房产',
                image: 'assets/images/property3.jpg',
                features: ['独栋别墅', '私家花园', '高端社区', '品质装修'],
                description: '独栋别墅，园林式设计，高端生活品质',
                avgPrice: 13571,
                totalPrice: 380,
                tags: ['别墅', '独栋', '高端', '花园'],
                searchKeywords: '书香别墅 恒北村 独栋别墅 私家花园 高端社区 品质装修'
            },
            {
                id: 4,
                name: '阳光花城',
                type: 'house',
                price: 125,
                priceUnit: '万',
                location: '大丰区城东新区',
                address: '城东新区康乐路168号',
                area: 98,
                areaUnit: '㎡',
                buildYear: '2022',
                floors: '11层',
                households: '368户',
                developer: '宜家房产',
                image: 'assets/images/property4.jpg',
                features: ['现房', '学区房', '商业配套', '交通便利'],
                description: '现代化小区，交通便利，生活配套完善',
                avgPrice: 12755,
                totalPrice: 125,
                tags: ['住宅', '现房', '学区', '配套'],
                searchKeywords: '阳光花城 城东新区 现房 学区房 商业配套 交通便利'
            },
            {
                id: 5,
                name: '翡翠湾',
                type: 'apartment',
                price: 195,
                priceUnit: '万',
                location: '大丰区港城路',
                address: '港城路翡翠湾小区',
                area: 135,
                areaUnit: '㎡',
                buildYear: '2023',
                floors: '22层',
                households: '198户',
                developer: '宜家房产',
                image: 'assets/images/property5.jpg',
                features: ['高端装修', '物业优质', '地段优越', '升值潜力'],
                description: '高端公寓，品质生活，投资首选',
                avgPrice: 14444,
                totalPrice: 195,
                tags: ['公寓', '高端', '地段', '投资'],
                searchKeywords: '翡翠湾 港城路 高端装修 物业优质 地段优越 升值潜力'
            },
            {
                id: 6,
                name: '绿野仙踪',
                type: 'villa',
                price: 520,
                priceUnit: '万',
                location: '大丰区港北新城',
                address: '港北新城绿野大道1号',
                area: 320,
                areaUnit: '㎡',
                buildYear: '2024',
                floors: '4层',
                households: '32户',
                developer: '宜家房产',
                image: 'assets/images/property6.jpg',
                features: ['顶级别墅', '私家泳池', '会所配套', '24小时保安'],
                description: '顶级别墅区，私密性好，尊享品质生活',
                avgPrice: 16250,
                totalPrice: 520,
                tags: ['别墅', '顶级', '泳池', '会所'],
                searchKeywords: '绿野仙踪 港北新城 顶级别墅 私家泳池 会所配套 保安'
            }
        ];
        
        // 添加索引以提高搜索性能
        this.buildSearchIndex();
        
        // 性能标记结束
        if (window.performance) {
            performance.mark('data-load-end');
            performance.measure('data-loading', 'data-load-start', 'data-load-end');
        }
    }
    
    /**
     * 构建搜索索引 - 优化版
     */
    buildSearchIndex() {
        this.searchIndex = {};
        
        // 使用文档片段提高性能
        this.properties.forEach(property => {
            const searchText = `${property.name} ${property.location} ${property.address} ${property.features.join(' ')} ${property.description} ${property.searchKeywords}`.toLowerCase();
            
            const words = searchText.match(/[\u4e00-\u9fa5]+|[a-zA-Z]+/g) || [];
            words.forEach(word => {
                if (!this.searchIndex[word]) {
                    this.searchIndex[word] = new Set();
                }
                this.searchIndex[word].add(property.id);
            });
        });
        
        // 转换Set为数组以保持兼容性
        Object.keys(this.searchIndex).forEach(key => {
            this.searchIndex[key] = Array.from(this.searchIndex[key]);
        });
    }
    
    /**
     * 设置事件监听 - 优化版，使用事件委托
     */
    setupEventListeners() {
        const searchInput = document.getElementById('searchInput');
        const priceRange = document.getElementById('priceRange');
        const searchForm = document.querySelector('.search-form');
        
        // 搜索输入事件 - 使用防抖
        searchInput.addEventListener('input', this.debounce((e) => {
            this.handleSearchInput(e.target.value);
        }, 300));
        
        // 表单提交事件
        searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.performSearch();
        });
        
        // 价格滑块事件 - 使用防抖
        priceRange.addEventListener('input', this.debounce(() => {
            this.updatePriceDisplay();
        }, 100));
        
        // 筛选选项事件 - 使用事件委托
        this.setupFilterListeners();
        
        // 排序选项事件 - 使用事件委托
        this.setupSortListeners();
        
        // 点击其他地方隐藏搜索建议
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.search-box')) {
                this.hideSuggestions();
            }
        });
        
        // 添加页面可见性变化监听，优化性能
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                // 页面可见时刷新数据
                this.refreshResults();
            }
        });
    }
    
    /**
     * 防抖函数 - 优化用户输入处理
     */
    debounce(func, delay) {
        return (...args) => {
            clearTimeout(this.debounceTimer);
            this.debounceTimer = setTimeout(() => {
                func.apply(this, args);
            }, delay);
        };
    }
    
    /**
     * 设置筛选监听器 - 使用事件委托
     */
    setupFilterListeners() {
        const filtersContainer = document.querySelector('.filters-container');
        if (filtersContainer) {
            filtersContainer.addEventListener('click', (e) => {
                // 类型、区域、位置筛选
                if (e.target.classList.contains('filter-option')) {
                    const filterType = e.target.closest('[id$="Filters"]')?.id.replace('Filters', '');
                    if (filterType) {
                        this.handleFilterClick(e.target, filterType);
                    }
                }
            });
        }
        
        // 特色标签筛选（支持多选）
        const featureContainer = document.getElementById('featureFilters');
        if (featureContainer) {
            featureContainer.addEventListener('click', (e) => {
                if (e.target.classList.contains('filter-option')) {
                    this.handleFeatureFilterClick(e.target);
                }
            });
        }
    }
    
    /**
     * 设置排序监听器 - 使用事件委托
     */
    setupSortListeners() {
        const sortContainer = document.querySelector('.sort-options');
        if (sortContainer) {
            sortContainer.addEventListener('click', (e) => {
                if (e.target.classList.contains('sort-btn')) {
                    this.handleSortChange(e.target);
                }
            });
        }
    }
    
    /**
     * 初始化筛选器
     */
    initializeFilters() {
        // 默认选中"不限"选项
        ['type', 'area', 'location'].forEach(filterType => {
            const container = document.getElementById(`${filterType}Filters`);
            if (container) {
                const firstOption = container.querySelector('.filter-option');
                if (firstOption) {
                    firstOption.classList.add('active');
                }
            }
        });
        
        this.updatePriceDisplay();
    }
    
    /**
     * 处理搜索输入 - 优化版
     */
    handleSearchInput(value) {
        this.currentFilters.keyword = value;
        
        if (value.length > 0) {
            this.showSuggestions(value);
        } else {
            this.hideSuggestions();
        }
    }
    
    /**
     * 显示搜索建议 - 优化版，使用文档片段
     */
    showSuggestions(keyword) {
        const suggestionsContainer = document.getElementById('searchSuggestions');
        if (!suggestionsContainer) return;
        
        // 获取匹配的建议
        const suggestions = this.getSearchSuggestions(keyword);
        
        if (suggestions.length > 0) {
            // 使用文档片段提高性能
            const fragment = document.createDocumentFragment();
            
            suggestions.forEach(suggestion => {
                const item = document.createElement('div');
                item.className = 'suggestion-item';
                item.innerHTML = `
                    <i class="fas fa-search text-muted me-2"></i>
                    <span>${this.highlightKeyword(suggestion, keyword)}</span>
                `;
                
                item.addEventListener('click', () => {
                    document.getElementById('searchInput').value = suggestion;
                    this.currentFilters.keyword = suggestion;
                    this.performSearch();
                    this.hideSuggestions();
                    this.addToSearchHistory(suggestion);
                });
                
                fragment.appendChild(item);
            });
            
            // 清空并添加新建议
            suggestionsContainer.innerHTML = '';
            suggestionsContainer.appendChild(fragment);
            suggestionsContainer.style.display = 'block';
        } else {
            this.hideSuggestions();
        }
    }
    
    /**
     * 获取搜索建议 - 优化版
     */
    getSearchSuggestions(keyword) {
        const lowercaseKeyword = keyword.toLowerCase();
        const suggestions = new Set();
        
        // 从搜索历史中获取建议
        this.searchHistory.forEach(item => {
            if (item.toLowerCase().includes(lowercaseKeyword)) {
                suggestions.add(item);
            }
        });
        
        // 从房源数据中获取建议
        this.properties.forEach(property => {
            if (property.name.toLowerCase().includes(lowercaseKeyword)) {
                suggestions.add(property.name);
            }
            
            if (property.location.toLowerCase().includes(lowercaseKeyword)) {
                suggestions.add(property.location);
            }
            
            property.features.forEach(feature => {
                if (feature.toLowerCase().includes(lowercaseKeyword)) {
                    suggestions.add(feature);
                }
            });
        });
        
        // 限制建议数量
        return Array.from(suggestions).slice(0, 5);
    }
    
    /**
     * 高亮关键词
     */
    highlightKeyword(text, keyword) {
        if (!keyword) return text;
        
        const regex = new RegExp(keyword, 'gi');
        return text.replace(regex, match => `<strong class="text-primary">${match}</strong>`);
    }
    
    /**
     * 隐藏搜索建议
     */
    hideSuggestions() {
        const suggestionsContainer = document.getElementById('searchSuggestions');
        if (suggestionsContainer) {
            suggestionsContainer.style.display = 'none';
        }
    }
    
    /**
     * 执行搜索 - 优化版
     */
    performSearch() {
        // 性能标记开始
        if (window.performance) {
            performance.mark('search-start');
        }
        
        // 获取筛选后的结果
        this.filteredResults = this.getFilteredProperties();
        
        // 根据当前排序方式排序结果
        this.sortResults();
        
        // 渲染搜索结果
        this.renderSearchResults();
        
        // 添加到搜索历史
        if (this.currentFilters.keyword) {
            this.addToSearchHistory(this.currentFilters.keyword);
        }
        
        // 性能标记结束
        if (window.performance) {
            performance.mark('search-end');
            performance.measure('search-execution', 'search-start', 'search-end');
            
            const measures = performance.getEntriesByType('measure');
            console.log(`[性能] 搜索执行时间: ${measures[measures.length - 1].duration.toFixed(2)}ms`);
        }
    }
    
    /**
     * 获取筛选后的房源 - 优化版
     */
    getFilteredProperties() {
        // 使用缓存提高性能
        const { keyword, type, priceMax, area, location, features } = this.currentFilters;
        
        // 基于关键词搜索
        let results = this.properties;
        
        if (keyword) {
            const keywordLower = keyword.toLowerCase();
            const matchedIds = new Set();
            
            // 使用索引进行快速搜索
            const words = keywordLower.match(/[\u4e00-\u9fa5]+|[a-zA-Z]+/g) || [];
            words.forEach(word => {
                const ids = this.searchIndex[word] || [];
                ids.forEach(id => matchedIds.add(id));
            });
            
            // 如果索引没有匹配，则进行全文搜索
            if (matchedIds.size === 0) {
                results = results.filter(property => {
                    const searchText = `${property.name} ${property.location} ${property.address} ${property.features.join(' ')} ${property.description}`.toLowerCase();
                    return searchText.includes(keywordLower);
                });
            } else {
                results = results.filter(property => matchedIds.has(property.id));
            }
        }
        
        // 应用其他筛选条件
        return results.filter(property => {
            // 类型筛选
            if (type !== 'all' && property.type !== type) return false;
            
            // 价格筛选
            if (property.price > priceMax) return false;
            
            // 面积筛选
            if (area !== 'all') {
                const [minArea, maxArea] = area.split('-').map(Number);
                if (isNaN(maxArea)) {
                    // 处理"200以上"的情况
                    if (property.area < minArea) return false;
                } else {
                    // 处理范围的情况
                    if (property.area < minArea || property.area > maxArea) return false;
                }
            }
            
            // 位置筛选
            if (location !== 'all' && !property.location.includes(location)) return false;
            
            // 特色筛选（支持多选）
            if (features.length > 0) {
                return features.every(feature => property.features.includes(feature));
            }
            
            return true;
        });
    }
    
    /**
     * 排序结果 - 优化版
     */
    sortResults() {
        switch (this.currentSort) {
            case 'price-asc':
                this.filteredResults.sort((a, b) => a.price - b.price);
                break;
            case 'price-desc':
                this.filteredResults.sort((a, b) => b.price - a.price);
                break;
            case 'area-asc':
                this.filteredResults.sort((a, b) => a.area - b.area);
                break;
            case 'area-desc':
                this.filteredResults.sort((a, b) => b.area - a.area);
                break;
            case 'newest':
                this.filteredResults.sort((a, b) => parseInt(b.buildYear) - parseInt(a.buildYear));
                break;
            case 'relevance':
            default:
                // 如果有关键词，按相关性排序；否则按ID排序
                if (this.currentFilters.keyword) {
                    const keyword = this.currentFilters.keyword.toLowerCase();
                    this.filteredResults.sort((a, b) => {
                        const aRelevance = this.calculateRelevance(a, keyword);
                        const bRelevance = this.calculateRelevance(b, keyword);
                        return bRelevance - aRelevance;
                    });
                } else {
                    this.filteredResults.sort((a, b) => a.id - b.id);
                }
                break;
        }
    }
    
    /**
     * 计算相关性得分 - 优化版
     */
    calculateRelevance(property, keyword) {
        let score = 0;
        
        // 名称匹配权重最高
        if (property.name.toLowerCase().includes(keyword)) {
            score += 10;
        }
        
        // 位置匹配
        if (property.location.toLowerCase().includes(keyword)) {
            score += 5;
        }
        
        // 特色匹配
        property.features.forEach(feature => {
            if (feature.toLowerCase().includes(keyword)) {
                score += 3;
            }
        });
        
        // 描述匹配
        if (property.description.toLowerCase().includes(keyword)) {
            score += 2;
        }
        
        // 标签匹配
        property.tags.forEach(tag => {
            if (tag.toLowerCase().includes(keyword)) {
                score += 2;
            }
        });
        
        return score;
    }
    
    /**
     * 渲染搜索结果 - 优化版，使用文档片段
     */
    renderSearchResults() {
        const resultsContainer = document.getElementById('searchResults');
        const noResultsContainer = document.getElementById('noResults');
        
        if (!resultsContainer || !noResultsContainer) return;
        
        // 更新结果计数
        const resultCount = document.getElementById('resultCount');
        if (resultCount) {
            resultCount.textContent = this.filteredResults.length;
        }
        
        // 显示或隐藏无结果提示
        if (this.filteredResults.length === 0) {
            resultsContainer.style.display = 'none';
            noResultsContainer.style.display = 'block';
            return;
        } else {
            resultsContainer.style.display = 'block';
            noResultsContainer.style.display = 'none';
        }
        
        // 使用文档片段提高性能
        const fragment = document.createDocumentFragment();
        
        this.filteredResults.forEach(property => {
            const propertyCard = document.createElement('div');
            propertyCard.className = 'property-card';
            propertyCard.innerHTML = `
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="${property.image}" class="img-fluid rounded-start property-img" alt="${property.name}" loading="lazy">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <h5 class="card-title">${this.highlightKeyword(property.name, this.currentFilters.keyword)}</h5>
                                <span class="price-tag">${property.price}${property.priceUnit}</span>
                            </div>
                            <p class="card-text location">
                                <i class="fas fa-map-marker-alt text-primary me-1"></i>
                                ${this.highlightKeyword(property.location, this.currentFilters.keyword)}
                            </p>
                            <p class="card-text info">
                                <span><i class="fas fa-home me-1"></i>${property.area}${property.areaUnit}</span>
                                <span><i class="fas fa-building me-1"></i>${property.type === 'house' ? '住宅' : property.type === 'apartment' ? '公寓' : '别墅'}</span>
                                <span><i class="fas fa-calendar-alt me-1"></i>${property.buildYear}年建成</span>
                            </p>
                            <div class="features-container">
                                ${property.features.map(feature => `
                                    <span class="feature-tag">${this.highlightKeyword(feature, this.currentFilters.keyword)}</span>
                                `).join('')}
                            </div>
                            <p class="card-text description">${this.highlightKeyword(property.description, this.currentFilters.keyword)}</p>
                            <div class="action-buttons">
                                <button class="btn btn-primary btn-sm" onclick="propertySearch.viewPropertyDetail(${property.id})">
                                    <i class="fas fa-info-circle me-1"></i>查看详情
                                </button>
                                <button class="btn btn-outline-primary btn-sm" onclick="propertySearch.saveProperty(${property.id})">
                                    <i class="far fa-heart me-1"></i>收藏
                                </button>
                                <button class="btn btn-outline-success btn-sm" onclick="propertySearch.contactAgent(${property.id})">
                                    <i class="fas fa-phone-alt me-1"></i>联系经纪人
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            fragment.appendChild(propertyCard);
        });
        
        // 清空并添加新结果
        resultsContainer.innerHTML = '';
        resultsContainer.appendChild(fragment);
        
        // 添加图片懒加载
        this.setupLazyLoading();
    }
    
    /**
     * 设置图片懒加载
     */
    setupLazyLoading() {
        if ('IntersectionObserver' in window) {
            const lazyImages = document.querySelectorAll('img[loading="lazy"]');
            
            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src || img.src;
                        imageObserver.unobserve(img);
                    }
                });
            });
            
            lazyImages.forEach(img => {
                imageObserver.observe(img);
            });
        }
    }
    
    /**
     * 处理筛选点击 - 优化版
     */
    handleFilterClick(element, filterType) {
        // 移除同组中的所有活动状态
        const container = document.getElementById(`${filterType}Filters`);
        if (container) {
            const options = container.querySelectorAll('.filter-option');
            options.forEach(option => option.classList.remove('active'));
        }
        
        // 添加活动状态到当前选项
        element.classList.add('active');
        
        // 更新筛选条件
        this.currentFilters[filterType] = element.dataset.value || 'all';
        
        // 执行搜索
        this.performSearch();
    }
    
    /**
     * 处理特色筛选点击（多选）- 优化版
     */
    handleFeatureFilterClick(element) {
        // 切换活动状态
        element.classList.toggle('active');
        
        const feature = element.dataset.value;
        
        // 更新特色筛选数组
        if (element.classList.contains('active')) {
            // 添加特色
            if (!this.currentFilters.features.includes(feature)) {
                this.currentFilters.features.push(feature);
            }
        } else {
            // 移除特色
            this.currentFilters.features = this.currentFilters.features.filter(f => f !== feature);
        }
        
        // 执行搜索
        this.performSearch();
    }
    
    /**
     * 处理排序变更 - 优化版
     */
    handleSortChange(element) {
        // 移除所有排序按钮的活动状态
        const sortButtons = document.querySelectorAll('.sort-btn');
        sortButtons.forEach(btn => btn.classList.remove('active'));
        
        // 添加活动状态到当前按钮
        element.classList.add('active');
        
        // 更新排序方式
        this.currentSort = element.dataset.sort || 'relevance';
        
        // 重新排序并渲染结果
        this.sortResults();
        this.renderSearchResults();
    }
    
    /**
     * 更新价格显示 - 优化版
     */
    updatePriceDisplay() {
        const priceRange = document.getElementById('priceRange');
        const priceDisplay = document.getElementById('priceDisplay');
        
        if (!priceRange || !priceDisplay) return;
        
        const value = priceRange.value;
        priceDisplay.textContent = value;
        
        // 更新筛选条件
        this.currentFilters.priceMax = parseInt(value);
        
        // 执行搜索
        this.performSearch();
    }
    
    /**
     * 添加到搜索历史 - 优化版
     */
    addToSearchHistory(keyword) {
        if (!keyword || keyword.trim() === '') return;
        
        // 移除重复项
        this.searchHistory = this.searchHistory.filter(item => item !== keyword);
        
        // 添加到历史开头
        this.searchHistory.unshift(keyword);
        
        // 限制历史记录数量
        if (this.searchHistory.length > 10) {
            this.searchHistory.pop();
        }
        
        // 保存到本地存储
        this.saveSearchHistory();
    }
    
    /**
     * 保存搜索历史到本地存储
     */
    saveSearchHistory() {
        try {
            localStorage.setItem('searchHistory', JSON.stringify(this.searchHistory));
        } catch (e) {
            console.error('保存搜索历史失败:', e);
        }
    }
    
    /**
     * 加载保存的搜索
     */
    loadSavedSearches() {
        try {
            const savedSearches = localStorage.getItem('savedSearches');
            if (savedSearches) {
                this.savedSearches = JSON.parse(savedSearches);
            }
            
            const searchHistory = localStorage.getItem('searchHistory');
            if (searchHistory) {
                this.searchHistory = JSON.parse(searchHistory);
            }
        } catch (e) {
            console.error('加载保存的搜索失败:', e);
        }
    }
    
    /**
     * 查看房源详情
     */
    viewPropertyDetail(propertyId) {
        const property = this.properties.find(p => p.id === propertyId);
        if (!property) return;
        
        alert(`查看详情: ${property.name}\n价格: ${property.price}${property.priceUnit}\n位置: ${property.location}\n面积: ${property.area}${property.areaUnit}`);
        // 实际应用中应跳转到详情页或打开模态框
    }
    
    /**
     * 收藏房源
     */
    saveProperty(propertyId) {
        alert(`已收藏房源 ID: ${propertyId}`);
        // 实际应用中应保存到用户收藏列表
    }
    
    /**
     * 联系经纪人
     */
    contactAgent(propertyId) {
        const property = this.properties.find(p => p.id === propertyId);
        if (!property) return;
        
        alert(`联系经纪人查看: ${property.name}\n我们的客服将尽快与您联系`);
        // 实际应用中应打开联系表单或拨打电话
    }
    
    /**
     * 显示推荐房源
     */
    showRecommendations() {
        // 重置关键词和特色筛选
        this.currentFilters.keyword = '';
        this.currentFilters.features = [];
        
        // 重置搜索框
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.value = '';
        }
        
        // 重置特色标签选择
        const featureTags = document.querySelectorAll('#featureFilters .filter-option');
        featureTags.forEach(tag => tag.classList.remove('active'));
        
        // 执行搜索以显示所有结果
        this.performSearch();
    }
    
    /**
     * 刷新结果 - 用于页面可见性变化时
     */
    refreshResults() {
        // 如果有筛选结果，重新渲染
        if (this.filteredResults.length > 0) {
            this.renderSearchResults();
        }
    }
}

// 初始化搜索系统
const propertySearch = new PropertySearch();

// 暴露到全局
window.propertySearch = propertySearch;